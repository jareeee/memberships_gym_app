<div class="min-h-screen text-white px-4 py-6">
  <!-- Header -->
  <div class="flex items-center mb-8">
    <%= link_to root_path, class: "text-white text-2xl mr-4" do %>
      <svg xmlns="http://www.w3.org/2000/svg" width="18" height="16" viewBox="0 0 18 16" fill="none">
        <path fill-rule="evenodd" clip-rule="evenodd" d="M18 8C18 8.41421 17.6642 8.75 17.25 8.75H2.56031L8.03063 14.2194C8.32368 14.5124 8.32368 14.9876 8.03063 15.2806C7.73757 15.5737 7.26243 15.5737 6.96937 15.2806L0.219375 8.53063C0.0785422 8.38995 -0.000590086 8.19906 -0.000590086 8C-0.000590086 7.80094 0.0785422 7.61005 0.219375 7.46937L6.96937 0.719375C7.26243 0.426319 7.73757 0.426319 8.03063 0.719375C8.32368 1.01243 8.32368 1.48757 8.03063 1.78062L2.56031 7.25H17.25C17.6642 7.25 18 7.58579 18 8Z" fill="white"/>
      </svg>
    <% end %>
    <h1 class="text-[18px] font-bold flex-1 text-center">Check In</h1>
  </div>

  <!-- QR Scanner -->
  <div class="text-center mb-6">
    <h2 class="text-xl font-bold mb-4">Scan QR Code to Check In</h2>
    <p class="text-gray-400 text-sm mb-6">Point your camera at the QR code</p>
  </div>

  <!-- Camera Container -->
  <div class="flex justify-center mb-6">
    <div class="relative">
      <video id="video" width="300" height="300" class="rounded-xl border-2 border-gray-600" autoplay></video>
      <div id="qr-overlay" class="absolute inset-0 border-2 border-blue-500 rounded-xl opacity-50 pointer-events-none"></div>
    </div>
  </div>

  <!-- Status Message -->
  <div id="status-message" class="text-center mb-4">
    <p class="text-gray-400">Initializing camera...</p>
  </div>

  <!-- Loading Indicator -->
  <div id="loading" class="text-center hidden">
    <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-white"></div>
    <p class="mt-2 text-gray-400">Processing check-in...</p>
  </div>
</div>

<script type="text/javascript" src="https://unpkg.com/@zxing/library@latest"></script>
<script type="text/javascript">
  // Wait for both DOM and ZXing library to be ready
  function initializeScanner() {
    // Check if ZXing is loaded
    if (typeof ZXing === 'undefined') {
      setTimeout(initializeScanner, 100);
      return;
    }

    let selectedDeviceId;
    let isScanning = false;
    const codeReader = new ZXing.BrowserQRCodeReader();
    const video = document.getElementById('video');
    const statusMessage = document.getElementById('status-message');
    const loading = document.getElementById('loading');

    // Function to cleanup camera resources
    function cleanup() {
      return new Promise((resolve) => {
        try {
          isScanning = false;
          codeReader.reset();
          
          // Stop all video tracks
          if (video.srcObject) {
            const tracks = video.srcObject.getTracks();
            tracks.forEach(track => {
              track.stop();
            });
            video.srcObject = null;
          }
          
          // Small delay to ensure cleanup is fully processed
          setTimeout(resolve, 100);
        } catch (error) {
          resolve();
        }
      });
    }

    // Add cleanup event listeners
    window.addEventListener('beforeunload', () => cleanup());
    window.addEventListener('pagehide', () => cleanup());
    
    // Also cleanup when navigating away (for single page apps)
    document.addEventListener('visibilitychange', function() {
      if (document.hidden) {
        cleanup();
      }
    });

    // Cleanup when clicking back button or any navigation links
    document.addEventListener('click', function(e) {
      const link = e.target.closest('a');
      if (link && link.href && !link.href.includes('#')) {
        e.preventDefault();
        cleanup().then(() => {
          window.location.href = link.href;
        });
      }
    });

    // Function to update status message
    function updateStatus(message, isError = false) {
      statusMessage.innerHTML = `<p class="${isError ? 'text-red-400' : 'text-gray-400'}">${message}</p>`;
    }

    // Function to send check-in request
    async function sendCheckIn(qrData) {
      loading.classList.remove('hidden');
      statusMessage.classList.add('hidden');
      
      try {
        console.log('Sending QR data:', qrData);
        
        const response = await fetch('/check-in', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('[name="csrf-token"]').getAttribute('content'),
            'Accept': 'application/json'
          },
          body: JSON.stringify({ qr_data: qrData })
        });

        console.log('Response status:', response.status);
        console.log('Response headers:', response.headers.get('content-type'));

        // Check if response is actually JSON
        const contentType = response.headers.get('content-type');
        if (!contentType || !contentType.includes('application/json')) {
          const textResponse = await response.text();
          console.error('Non-JSON response:', textResponse);
          throw new Error('Server returned non-JSON response. Status: ' + response.status);
        }

        const result = await response.json();
        console.log('Response result:', result);
        
        loading.classList.add('hidden');
        statusMessage.classList.remove('hidden');
        
        if (result.success) {
          updateStatus('✅ ' + result.message);
          // Cleanup before redirect and wait for it to complete
          cleanup().then(() => {
            setTimeout(() => {
              window.location.href = '/';
            }, 1500);
          });
        } else {
          updateStatus('❌ ' + result.message, true);
          // Restart scanning after 3 seconds
          setTimeout(() => {
            if (!document.hidden) { // Only restart if page is still visible
              startScanning();
            }
          }, 3000);
        }
      } catch (error) {
        console.error('Request error:', error);
        loading.classList.add('hidden');
        statusMessage.classList.remove('hidden');
        
        if (error.message.includes('non-JSON response')) {
          updateStatus('❌ Server error. Please check your connection and try again.', true);
        } else {
          updateStatus('❌ Network error: ' + error.message, true);
        }
        
        setTimeout(() => {
          if (!document.hidden) { // Only restart if page is still visible
            startScanning();
          }
        }, 3000);
      }
    }

    // Function to start continuous scanning
    function startScanning() {
      if (isScanning) return; // Prevent multiple scanning instances
      
      isScanning = true;
      updateStatus('Scanning for QR code...');
      
      codeReader.decodeFromInputVideoDeviceContinuously(selectedDeviceId, 'video', (result, err) => {
        if (!isScanning) return; // Stop if cleanup was called
        
        if (result) {
          updateStatus('QR Code detected! Processing...');
          // Stop camera before sending request and wait for cleanup
          cleanup().then(() => {
            sendCheckIn(result.text);
          });
        }

        if (err && !(err instanceof ZXing.NotFoundException)) {
          console.error('QR scanning error:', err);
        }
      });
    }

    // Initialize camera with proper error handling
    function initCamera() {
      updateStatus('Requesting camera access...');
      
      codeReader.getVideoInputDevices()
        .then((videoInputDevices) => {
          
          if (videoInputDevices.length === 0) {
            updateStatus('No camera found. Please check camera permissions.', true);
            return;
          }

          // Use back camera if available, otherwise use first available
          selectedDeviceId = videoInputDevices.find(device => 
            device.label.toLowerCase().includes('back') || 
            device.label.toLowerCase().includes('rear')
          )?.deviceId || videoInputDevices[0].deviceId;

          updateStatus('Camera ready. Starting scan...');
          
          // Small delay to ensure camera is properly initialized
          setTimeout(() => {
            startScanning();
          }, 500);
        })
        .catch((err) => {
          if (err.name === 'NotAllowedError') {
            updateStatus('Camera access denied. Please allow camera permissions and refresh the page.', true);
          } else if (err.name === 'NotFoundError') {
            updateStatus('No camera found on this device.', true);
          } else {
            updateStatus('Camera error: ' + err.message + '. Please refresh the page.', true);
          }
        });
    }

    // Start camera initialization
    initCamera();
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeScanner);
  } else {
    // DOM is already ready
    initializeScanner();
  }
</script>