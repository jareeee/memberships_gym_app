<div class="min-h-screen text-white">
  <!-- Header -->
  <div class="flex items-center justify-between pt-[16px] pr-[16px] pb-[8px] pl-[16px]">
    <%= link_to workout_plans_path do %>
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <polyline points="15,18 9,12 15,6"></polyline>
      </svg>
    <% end %>
    <h1 class="font-bold text-[18px] mx-auto">AI Workout Recommendation</h1>
    <div class="w-6"></div> <!-- Spacer for centering -->
  </div>

  <!-- Chat Interface -->
  <div class="px-[16px] mt-[20px]">
    <% remaining_uses = current_user.ai_remaining_uses rescue nil %>
    <% if remaining_uses.present? %>
      <div class="mb-3 text-[12px] text-gray-400">Sisa kuota AI minggu ini: <span class="text-white font-medium"><%= remaining_uses %></span> / <%= User::WEEKLY_AI_LIMIT %></div>
    <% end %>
    <!-- Chat History -->
    <% @workout_plan.chat_history.each do |message| %>
      <% if message['role'] == 'user' %>
        <!-- User Message -->
        <div class="flex items-end justify-end mb-4">
          <div class="bg-[#4282EB] text-white px-4 py-3 rounded-[18px] rounded-br-[4px] max-w-[280px]">
            <p class="text-[12px] text-white/80 mb-1"><%= user_display_name(current_user) %></p>
            <p class="text-[14px]"><%= message['content'] %></p>
          </div>
          <div class="ml-3 flex-shrink-0">
            <%= avatar_for(current_user, size: 32) %>
          </div>
        </div>
      <% elsif message['role'] == 'assistant' %>
        <!-- Assistant Message -->
        <div class="flex justify-start mb-4">
          <div class="mr-3 flex-shrink-0">
            <div class="w-[32px] h-[32px] bg-[#4282EB] rounded-full flex items-center justify-center">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2">
                <path d="M12 2L2 7l10 5 10-5-10-5z"></path>
                <path d="m2 17 10 5 10-5"></path>
                <path d="m2 12 10 5 10-5"></path>
              </svg>
            </div>
          </div>
          <div class="bg-gray-800 text-white px-4 py-3 rounded-[18px] rounded-bl-[4px] max-w-[280px]">
            <p class="text-[12px] text-white/80 mb-1">AI Coach</p>
            <p class="text-[14px]"><%= message['content'] %></p>
          </div>
        </div>
      <% end %>
    <% end %>

    <!-- Workout Plan Card -->
    <div class="bg-gray-800 rounded-[16px] p-4 mb-6">
      <!-- Workout Title -->
      <h2 class="text-[18px] font-bold text-white mb-2"><%= @workout_plan.title %></h2>
      
      <!-- Workout Description -->
      <p class="text-[14px] text-gray-300 leading-[20px] mb-4">
        <%= @workout_plan.summary %>
      </p>

      <!-- Workout Stats -->
      <div class="flex items-center text-[12px] text-gray-400 mb-4">
        <span class="bg-gray-700 px-2 py-1 rounded-full mr-2">
          <%= @workout_plan.focus_area.humanize %>
        </span>
        <span><%= @workout_plan.plan_exercises.count %> exercises</span>
      </div>

      <!-- Exercises List -->
      <div class="space-y-3">
        <% @workout_plan.plan_exercises.each_with_index do |exercise, index| %>
          <div class="bg-gray-700 rounded-[8px] p-3">
            <div class="flex-1">
              <h3 class="text-[14px] font-medium text-white"><%= "#{index + 1}. #{exercise.exercise}" %></h3>
              <div class="flex items-center space-x-4 mt-1">
                <span class="text-[12px] text-gray-400"><%= exercise.sets %> sets</span>
                <span class="text-[12px] text-gray-400"><%= exercise.reps %> reps</span>
                <% if exercise.rest_seconds.present? %>
                  <span class="text-[12px] text-gray-400"><%= exercise.rest_seconds %>s rest</span>
                <% end %>
              </div>
            </div>
          </div>
        <% end %>
      </div>
    </div>

    <!-- Input Section -->
    <div class="fixed bottom-0 left-0 right-0 bg-[#1A1A1A] p-4 border-t border-gray-700">
      <!-- Posting here will create a brand new workout plan (new chat) -->
      <%= form_with url: workout_plans_path, method: :post, local: true, class: "flex items-center space-x-3" do |form| %>
        <div class="flex-1 relative">
          <%= form.text_field :request_text, 
        placeholder: (remaining_uses && remaining_uses <= 0) ? "Kuota AI minggu ini habis. Reset setiap Senin" : "Type your request", 
        disabled: (remaining_uses && remaining_uses <= 0),
        class: "w-full bg-gray-800 text-white px-4 py-3 rounded-[24px] border border-gray-600 focus:border-blue-500 focus:outline-none text-[14px] #{(remaining_uses && remaining_uses <= 0) ? 'opacity-60 cursor-not-allowed' : ''}" %>
        </div>
        <%= form.submit (remaining_uses && remaining_uses <= 0) ? "Kuota Habis" : "Generate New", 
      disabled: (remaining_uses && remaining_uses <= 0),
      class: "bg-[#4282EB] text-white px-6 py-3 rounded-[24px] font-medium text-[14px] hover:bg-blue-600 transition-colors #{(remaining_uses && remaining_uses <= 0) ? 'opacity-60 cursor-not-allowed' : ''}" %>
      <% end %>
    </div>
  </div>

  <!-- Bottom padding to account for fixed input -->
  <div class="h-[100px]"></div>
</div>

<script>
  // Auto-refresh jika workout plan masih dalam status generating
  <% if @workout_plan.meta['status'] == 'generating' %>
    let isCheckingStatus = true;
    let statusInterval;
    
    // Show loading indicator
    function showLoadingIndicator() {
      const workoutCard = document.querySelector('.bg-gray-800.rounded-\\[16px\\]');
      if (workoutCard) {
        workoutCard.innerHTML = `
          <div class="text-center py-8">
            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto mb-4"></div>
            <h2 class="text-[18px] font-bold text-white mb-2">Generating your workout plan...</h2>
            <p class="text-[14px] text-gray-300">Please wait while we create your personalized workout.</p>
          </div>
        `;
      }
    }
    
    // Stop checking and cleanup
    function stopChecking() {
      if (statusInterval) {
        clearInterval(statusInterval);
        statusInterval = null;
      }
      isCheckingStatus = false;
      console.log('Stopped status checking');
    }
    
    // Check status via JSON API
    function checkWorkoutStatus() {
      if (!isCheckingStatus) {
        return;
      }
      
      fetch(window.location.href + '.json')
      .then(response => response.json())
      .then(data => {
        console.log('Status check:', data);
        
        // If status is completed or has exercises, reload the page
        if (data.status === 'completed' || data.exercises_count > 0) {
          console.log('Workout plan completed, reloading...');
          stopChecking();
          window.location.reload();
          return;
        }
        
        // If failed, show error and reload
        if (data.status === 'failed') {
          console.log('Workout plan failed, reloading...');
          stopChecking();
          window.location.reload();
          return;
        }
        
        // If still generating, continue checking
        if (data.status === 'generating') {
          console.log('Still generating...');
        }
      })
      .catch(error => {
        console.log('Status check failed:', error);
      });
    }
    
    // Start loading indicator
    showLoadingIndicator();
    
    // Check status every 3 seconds
    statusInterval = setInterval(checkWorkoutStatus, 3000);
    
    // Stop checking after 3 minutes (timeout)
    setTimeout(() => {
      if (isCheckingStatus) {
        stopChecking();
        console.log('Status checking timed out');
        // Optionally reload after timeout
        window.location.reload();
      }
    }, 180000);
    
    // Also check when page becomes visible again
    document.addEventListener('visibilitychange', function() {
      if (!document.hidden && isCheckingStatus) {
        checkWorkoutStatus();
      }
    });
    
    // Immediate first check after 1 second
    setTimeout(() => {
      if (isCheckingStatus) {
        checkWorkoutStatus();
      }
    }, 1000);
    
    // Stop checking if user navigates away
    window.addEventListener('beforeunload', stopChecking);
  <% else %>
    console.log('Workout plan status: <%= @workout_plan.meta['status'] %>');
  <% end %>
</script>
